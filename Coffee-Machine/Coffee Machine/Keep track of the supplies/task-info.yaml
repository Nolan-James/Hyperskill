type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Latte.java
  visible: true
  text: |
    package machine;

    public class Latte {
        private int latteWater;
        private int latteMilk;
        private int latteBeans;
        private int latteCost;

        public Latte() {
            this.latteWater = 350;
            this.latteMilk = 75;
            this.latteBeans = 20;
            this.latteCost = 7;
        }

        public int getLatteWater() {
            return latteWater;
        }

        public void setLatteWater(int latteWater) {
            this.latteWater = latteWater;
        }

        public int getLatteMilk() {
            return latteMilk;
        }

        public void setLatteMilk(int latteMilk) {
            this.latteMilk = latteMilk;
        }

        public int getLatteBeans() {
            return latteBeans;
        }

        public void setLatteBeans(int latteBeans) {
            this.latteBeans = latteBeans;
        }

        public int getLatteCost() {
            return latteCost;
        }

        public void setLatteCost(int latteCost) {
            this.latteCost = latteCost;
        }
    }
  learner_created: true
- name: src/machine/Machine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class Machine {
        private int waterRequired;
        private int milkRequired;
        private int beansRequired;
        private int disposableCups;
        private int money;

        public Machine() {
            this.waterRequired = 400;
            this.milkRequired = 540;
            this.beansRequired = 120;
            this.disposableCups = 9;
            this.money = 550;
        }

        public int getWaterRequired() {
            return waterRequired;
        }

        public void setWaterRequired(int waterRequired) {
            this.waterRequired = waterRequired;
        }

        public int getMilkRequired() {
            return milkRequired;
        }

        public void setMilkRequired(int milkRequired) {
            this.milkRequired = milkRequired;
        }

        public int getBeansRequired() {
            return beansRequired;
        }

        public void setBeansRequired(int beansRequired) {
            this.beansRequired = beansRequired;
        }

        public int getDisposableCups() {
            return disposableCups;
        }

        public void setDisposableCups(int disposableCups) {
            this.disposableCups = disposableCups;
        }

        public int getMoney() {
            return money;
        }

        public void setMoney(int money) {
            this.money = money;
        }

        public void printContents() {
            System.out.println("The coffee machine has:");
            System.out.println(this.waterRequired + " ml of water");
            System.out.println(this.milkRequired + " ml of milk");
            System.out.println(this.beansRequired + " g of coffee beans");
            System.out.println(this.disposableCups + " disposable cups");
            System.out.println("$" + this.money + " of money");
        }

        public void checkContentsOfEspresso(Espresso espresso) {
            if (this.waterRequired < espresso.getEspressoWater()) {
                System.out.println("Sorry, not enough water!");
            }

            if (this.beansRequired < espresso.getEspressoBeans()) {
                System.out.println("Sorry, not enough coffee beans!");
            }

            if (this.waterRequired > espresso.getEspressoWater() && this.beansRequired > espresso.getEspressoBeans()) {
                System.out.println("I have enough resources, making you a coffee!");
                this.waterRequired -= espresso.getEspressoWater();
                this.beansRequired -= espresso.getEspressoBeans();
                this.money += espresso.getEspressoCost();
                this.disposableCups--;
            }
        }

        public void checkContentsOfLatte(Latte latte) {
            if (this.waterRequired < latte.getLatteWater()) {
                System.out.println("Sorry, not enough water!");
            }

            if (this.milkRequired < latte.getLatteMilk()) {
                System.out.println("Sorry, not enough milk!");
            }

            if (this.beansRequired < latte.getLatteBeans()) {
                System.out.println("Sorry, not enough coffee beans!");
            }

            if (this.waterRequired >= latte.getLatteWater()
                    && this.beansRequired >= latte.getLatteBeans() && this.milkRequired >= latte.getLatteMilk()) {
                System.out.println("I have enough resources, making you a coffee!");
                this.waterRequired -= latte.getLatteWater();
                this.milkRequired -= latte.getLatteMilk();
                this.beansRequired -= latte.getLatteBeans();
                this.money += latte.getLatteCost();
                this.disposableCups--;
            }
        }

        public void checkContentsOfCappuccino(Cappuccino cappuccino) {
            if (this.waterRequired < cappuccino.getCapWater()) {
                System.out.println("Sorry, not enough water!");
            }

            if (this.milkRequired < cappuccino.getCapeMilk()) {
                System.out.println("Sorry, not enough milk!");
            }

            if (this.beansRequired < cappuccino.getCapBeans()) {
                System.out.println("Sorry, not enough coffee beans!");
            }

            if (this.waterRequired > cappuccino.getCapWater()
                    && this.beansRequired > cappuccino.getCapBeans() && this.milkRequired > cappuccino.getCapeMilk()) {
                System.out.println("I have enough resources, making you a coffee!");
                this.waterRequired -= cappuccino.getCapWater();
                this.milkRequired -= cappuccino.getCapeMilk();
                this.beansRequired -= cappuccino.getCapBeans();
                this.money += cappuccino.getCapCost();
                this.disposableCups--;
            }
        }

        public void fill(Scanner scanner) {
            System.out.println("Write how many ml of water you want to add:");
            this.waterRequired += scanner.nextInt();
            System.out.println("Write how many ml of milk you want to add:");
            this.milkRequired += scanner.nextInt();
            System.out.println("Write how many grams of coffee beans you want to add:");
            this.beansRequired += scanner.nextInt();
            System.out.println("Write how many disposable cups of coffee you want to add:");
            this.disposableCups += scanner.nextInt();
        }

        public void take() {
            this.money = 0;
        }
    }
  learner_created: true
- name: src/machine/Espresso.java
  visible: true
  text: |
    package machine;

    public class Espresso {
        private int espressoWater;
        private int espressoBeans;
        private int espressoCost;

        public Espresso() {
            this.espressoWater = 250;
            this.espressoBeans = 16;
            this.espressoCost = 4;
        }

        public int getEspressoWater() {
            return espressoWater;
        }

        public void setEspressoWater(int espressoWater) {
            this.espressoWater = espressoWater;
        }

        public int getEspressoBeans() {
            return espressoBeans;
        }

        public void setEspressoBeans(int espressoBeans) {
            this.espressoBeans = espressoBeans;
        }

        public int getEspressoCost() {
            return espressoCost;
        }

        public void setEspressoCost(int espressoCost) {
            this.espressoCost = espressoCost;
        }
    }
  learner_created: true
- name: src/machine/Cappuccino.java
  visible: true
  text: |
    package machine;

    public class Cappuccino {
        private int capWater;
        private int capeMilk;
        private int capBeans;
        private int capCost;

        public Cappuccino() {
            this.capWater = 200;
            this.capeMilk = 100;
            this.capBeans = 12;
            this.capCost = 6;
        }

        public int getCapWater() {
            return capWater;
        }

        public void setCapWater(int capWater) {
            this.capWater = capWater;
        }

        public int getCapeMilk() {
            return capeMilk;
        }

        public void setCapeMilk(int capeMilk) {
            this.capeMilk = capeMilk;
        }

        public int getCapBeans() {
            return capBeans;
        }

        public void setCapBeans(int capBeans) {
            this.capBeans = capBeans;
        }

        public int getCapCost() {
            return capCost;
        }

        public void setCapCost(int capCost) {
            this.capCost = capCost;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 23 Nov 2021 23:25:02 UTC
record: -1
